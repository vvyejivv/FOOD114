<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
   "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="teamProject.food114.mapper.CustomerMapper">
	<insert id="insertConsumer" parameterType="hashmap">
		INSERT INTO
		FOOD114_CONSUMER
		VALUES(#{userId},#{pwd},#{userName},#{nickName},#{gender},#{birthMD},#{phone},concat(#{email},'@',
		<choose>
			<when test="emailAddr!=''">
				#{emailAddr}
			</when>
			<otherwise>
				#{emailAddrInput}
			</otherwise>
		</choose>
		),"1",now(),now(),"N","Y",null)
	</insert>
	<select id="selectUserID" parameterType="hashmap"
		resultType="teamProject.food114.model.Customer">
		SELECT *
		FROM FOOD114_CONSUMER
		WHERE USERID=#{userId}
	</select>
	<select id="selectUserAddr" parameterType="hashmap"
		resultType="teamProject.food114.model.Addr">
		SELECT *
		FROM FOOD114_CONSUMER_ADDR
		WHERE USERID=#{userId}
	</select>
	<select id="selectEmail" parameterType="hashmap"
		resultType="teamProject.food114.model.Customer">
		SELECT * FROM FOOD114_CONSUMER WHERE EMAIL=concat(#{email},"@",
		<choose>
			<when test="emailAddr!=''">
				#{emailAddr}
			</when>
			<otherwise>
				#{emailAddrInput}
			</otherwise>
		</choose>
		)
	</select>

	<!-- myInfo 변경 : 이름, 별명, 연락처, 이메일 -->
	<update id="updateMyInfo" parameterType="hashmap">
		UPDATE FOOD114_CONSUMER
		SET
		${column}=#{value}
		WHERE USERID = #{userId}
	</update>
	
	<!-- 회원 탈퇴시 -->
	<update id="updateUserLeave" parameterType="hashmap">
		UPDATE FOOD114_CONSUMER
		SET
		LEAVETIME = NOW() 
		WHERE USERID = #{userId}
	</update>

	<select id="selectUserSiGuDong" parameterType="hashmap"
		resultType="teamProject.food114.model.CustomerAddr">
		SELECT
		*
		FROM
		FOOD114_CONSUMER_ADDR A1
		INNER JOIN FOOD114_AREA
		A2 ON A1.OLDADDR LIKE CONCAT('%', A2.SI, '%')
		AND A1.OLDADDR LIKE
		CONCAT('%', A2.GU, '%')
		AND A1.OLDADDR LIKE CONCAT('%', A2.DONG, '%');
	</select>

	<!-- pwd 변경(myInfo) -->
	<update id="updatePwd" parameterType="hashmap">
		UPDATE FOOD114_CONSUMER
		SET
		PWD = #{newPwd}
		WHERE USERID = #{userId}
	</update>

	<!-- myInfo - my주소지 관리 - 주소지 상세보기 -->
	<select id="selectMyInfoAddr" parameterType="hashmap"
		resultType="teamProject.food114.model.CustomerAddr">
		SELECT *
		FROM FOOD114_CONSUMER_ADDR A
		INNER JOIN
		FOOD114_CONSUMER C ON C.USERID =
		A.USERID
		WHERE A.USERID =
		#{userId}
		ORDER BY DEFAULTYN DESC
	</select>
	
	<!-- myInfo - my주소지 관리 - 수정  : 주소, 휴대폰번호, 배송요청사항 -->
	<update id="updateAddr" parameterType="hashmap">
		UPDATE FOOD114_CONSUMER_ADDR
		SET
			OLDADDR = #{oldAddr},
			NEWADDR = #{newAddr},
			DETAIL = #{detail},
			PHONE = #{phone},
			REQUEST = #{request}
		WHERE USERID = #{userId} AND ADDRNO = #{addrNo}
	</update>
	
	<!-- 마이페이지 - 결제/주문/리뷰 - 주문내역 -->
	<select id="selectMyOrderList" parameterType="hashmap" resultType="teamProject.food114.model.Order">
		SELECT O.ORDERNO, COUNT(*) AS ORDERCNT, O.STATUS, B.BIZNAME, GROUP_CONCAT(CONCAT(M.MENU, '(', D.COUNT, ')') SEPARATOR ', ') AS MENUS, P.PRICE, 
		DATE_FORMAT(O.ORDERDATE, '%Y-%m-%d %H:%i') AS ORDERDATE
		FROM FOOD114_ORDERS O
		INNER JOIN FOOD114_ORDER_DETAIL D ON O.ORDERNO = D.ORDERNO
		INNER JOIN FOOD114_BIZ_INFO B ON O.BIZID = B.BIZID
		INNER JOIN FOOD114_MENU M ON D.MENUNO = M.MENUNO
		LEFT JOIN FOOD114_PAYMENT P ON O.ORDERNO = P.ORDERNO
		WHERE O.USERID = #{userId}
		GROUP BY O.ORDERNO
		ORDER BY O.ORDERDATE DESC
		<if test="startOrder!=''">
		LIMIT ${startOrder}, ${endOrder}
		</if>
	</select>
	<!-- 마이페이지 - 주문내역 갯수  -->
	<select id="selectMyOrderListCnt" parameterType="hashmap" resultType="teamProject.food114.model.Order">
		SELECT COUNT(*) AS LISTCNT 
		FROM (
			SELECT USERID
		      FROM FOOD114_ORDERS O
		      INNER JOIN FOOD114_ORDER_DETAIL D ON O.ORDERNO = D.ORDERNO
		      WHERE O.USERID = #{userId}
		      GROUP BY O.ORDERNO) T
		      GROUP BY T.USERID
	</select>	
	
	<!-- 주문완료 -->
	<select id="selectMyOrder" parameterType="hashmap" resultType="teamProject.food114.model.Order">
		SELECT O.ORDERNO, COUNT(*) AS ORDERCNT, O.STATUS, B.BIZNAME, GROUP_CONCAT(CONCAT(M.MENU, '(', D.COUNT, ')') SEPARATOR ', ') AS MENUS, P.PRICE, 
		DATE_FORMAT(O.ORDERDATE, '%Y-%m-%d %H:%i') AS ORDERDATE
		FROM FOOD114_ORDERS O
		INNER JOIN FOOD114_ORDER_DETAIL D ON O.ORDERNO = D.ORDERNO
		INNER JOIN FOOD114_BIZ_INFO B ON O.BIZID = B.BIZID
		INNER JOIN FOOD114_MENU M ON D.MENUNO = M.MENUNO
		LEFT JOIN FOOD114_PAYMENT P ON O.ORDERNO = P.ORDERNO
		WHERE O.USERID = #{userId} AND O.ORDERNO = #{orderNo}
		GROUP BY O.ORDERNO
		ORDER BY O.ORDERDATE DESC
	</select>
	
	<!-- myInfo - my주소지 관리 - 기본주소지 DEFAULTYN = 'N' 으로 설정 -->
	<update id="updateAddrList" parameterType="hashmap">
		UPDATE FOOD114_CONSUMER_ADDR
		SET
			DEFAULTYN = 'N'
		WHERE USERID = #{userId}
	</update>
	
	<!-- myInfo - my주소지 관리 - 기본주소지 DEFAULTYN = 'Y' -->
	<update id="updateAddrListYn" parameterType="hashmap">
		UPDATE FOOD114_CONSUMER_ADDR
		SET
			DEFAULTYN = 'Y'
		WHERE USERID = #{userId} AND ADDRNO = #{addrNo}
	</update>
	
	<!-- myInfo - my주소지 관리 - 주소지 추가 -->
	<insert id="insertAddrList" parameterType="hashmap">
		INSERT INTO
		FOOD114_CONSUMER_ADDR
		VALUES(null, #{userId},#{addrAs},#{oldAddr},#{newAddr},#{detail},'N',#{request},#{phone})
	</insert>
	<!-- myInfo - my주소지 관리 - 주소지 삭제 -->
	<delete id="deleteAddrList" parameterType="hashmap">
		DELETE FROM 
		FOOD114_CONSUMER_ADDR
		WHERE USERID = #{userId} AND ADDRNO = #{addrNo}
	</delete>
	
</mapper>